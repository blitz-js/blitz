{"version":3,"sources":["../../lib/has-necessary-dependencies.ts"],"names":["requiredTSPackages","file","pkg","requiredLintPackages","hasNecessaryDependencies","baseDir","checkTSDeps","checkESLintDeps","lintDuringBuild","resolved","undefined","resolutions","Map","requiredPackages","missingPackages","filter","p","set","require","resolve","paths","_","length","packagesHuman","map","packagesCli","join","yarnLockFile","isYarn","catch","removalTSMsg","chalk","bold","cyan","removalLintMsg","removalMsg","FatalError","red"],"mappings":"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","sourcesContent":["import chalk from 'chalk'\nimport { join } from 'path'\n\nimport { fileExists } from './file-exists'\nimport { getOxfordCommaList } from './oxford-comma-list'\nimport { FatalError } from './fatal-error'\n\nconst requiredTSPackages = [\n  { file: 'typescript', pkg: 'typescript' },\n  { file: '@types/react/index.d.ts', pkg: '@types/react' },\n  { file: '@types/node/index.d.ts', pkg: '@types/node' },\n]\n\nconst requiredLintPackages = [\n  { file: 'eslint/lib/api.js', pkg: 'eslint' },\n  { file: 'eslint-config-next', pkg: 'eslint-config-next' },\n]\n\nexport type NecessaryDependencies = {\n  resolved: Map<string, string>\n}\n\nexport async function hasNecessaryDependencies(\n  baseDir: string,\n  checkTSDeps: boolean,\n  checkESLintDeps: boolean,\n  lintDuringBuild: boolean = false\n): Promise<NecessaryDependencies> {\n  if (!checkTSDeps && !checkESLintDeps) {\n    return { resolved: undefined! }\n  }\n\n  let resolutions = new Map<string, string>()\n  let requiredPackages = checkESLintDeps\n    ? requiredLintPackages\n    : requiredTSPackages\n\n  const missingPackages = requiredPackages.filter((p) => {\n    try {\n      resolutions.set(p.pkg, require.resolve(p.file, { paths: [baseDir] }))\n      return false\n    } catch (_) {\n      return true\n    }\n  })\n\n  if (missingPackages.length < 1) {\n    return {\n      resolved: resolutions,\n    }\n  }\n\n  const packagesHuman = getOxfordCommaList(missingPackages.map((p) => p.pkg))\n  const packagesCli = missingPackages.map((p) => p.pkg).join(' ')\n\n  const yarnLockFile = join(baseDir, 'yarn.lock')\n  const isYarn = await fileExists(yarnLockFile).catch(() => false)\n\n  const removalTSMsg =\n    '\\n\\n' +\n    chalk.bold(\n      'If you are not trying to use TypeScript, please remove the ' +\n        chalk.cyan('tsconfig.json') +\n        ' file from your package root (and any TypeScript files in your pages directory).'\n    )\n  const removalLintMsg =\n    `\\n\\n` +\n    (lintDuringBuild\n      ? `If you do not want to run ESLint during builds, disable it in blitz.config.js. See https://blitzjs.com/docs/eslint-config#during-builds`\n      : `Once installed, run ${chalk.bold.cyan('next lint')} again.`)\n  const removalMsg = checkTSDeps ? removalTSMsg : removalLintMsg\n\n  throw new FatalError(\n    chalk.bold.red(\n      checkTSDeps\n        ? `It looks like you're trying to use TypeScript but do not have the required package(s) installed.`\n        : `To use ESLint, additional required package(s) must be installed.`\n    ) +\n      '\\n\\n' +\n      chalk.bold(`Please install ${chalk.bold(packagesHuman)} by running:`) +\n      '\\n\\n' +\n      `\\t${chalk.bold.cyan(\n        (isYarn ? 'yarn add --dev' : 'npm install --save-dev') +\n          ' ' +\n          packagesCli\n      )}` +\n      removalMsg +\n      '\\n'\n  )\n}\n"]}